section .data
    ; S-box para la función SubBytes
    s_box db 0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab
    db 0x76,0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4
    db 0x72,0xc0,0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71
    db 0xd8,0x31,0x15,0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2
    db 0xeb,0x27,0xb2,0x75,0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6
    db 0xb3,0x29,0xe3,0x2f,0x84,0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb
    db 0xbe,0x39,0x4a,0x4c,0x58,0xcf,0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45
    db 0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5
    db 0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44
    db 0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,0x60,0x81,0x4f,0xdc,0x22,0x2a
    db 0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,0xe0,0x32,0x3a,0x0a,0x49
    db 0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,0xe7,0xc8,0x37,0x6d
    db 0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,0xba,0x78,0x25
    db 0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,0x70,0x3e
    db 0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,0xe1
    db 0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf

section .bss
    state: resb 16        ; Espacio para el estado (16 bytes)
    key: resb 16          ; Espacio para la clave (16 bytes)
    roundkeys: resb 176   ; Espacio para las claves de ronda (11 rondas * 16 bytes)

section .text
global _start

_start:
    ; Inicialización del estado y la clave
    mov byte [state], 0x32
    mov byte [state+1], 0x88
    mov byte [state+2], 0x31
    mov byte [state+3], 0xE0
    mov byte [state+4], 0x43
    mov byte [state+5], 0x5A
    mov byte [state+6], 0x31
    mov byte [state+7], 0x37
    mov byte [state+8], 0xF6
    mov byte [state+9], 0x30
    mov byte [state+10], 0x98
    mov byte [state+11], 0x07
    mov byte [state+12], 0xA8
    mov byte [state+13], 0x8D
    mov byte [state+14], 0xA2
    mov byte [state+15], 0x34

    mov byte [key], 0x2b
    mov byte [key+1], 0x7e
    mov byte [key+2], 0x15
    mov byte [key+3], 0x16
    mov byte [key+4], 0x28
    mov byte [key+5], 0xae
    mov byte [key+6], 0xd2
    mov byte [key+7], 0xa6
    mov byte [key+8], 0xab
    mov byte [key+9], 0x09
    mov byte [key+10], 0x4f
    mov byte [key+11], 0x6c
    mov byte [key+12], 0x6c
    mov byte [key+13], 0x70
    mov byte [key+14], 0x4d
    mov byte [key+15], 0x61

    ; Generar claves de ronda
    call key_expansion

    ; Ejecutar AES
    call addroundkey
    mov ecx, 10
aes_rounds:
    call subbytes
    call shiftrows
    call mixcolumns
    call addroundkey
    loop aes_rounds

    ; Última ronda
    call subbytes
    call shiftrows
    call addroundkey

    ; Salir del programa
    mov eax, 60        ; syscall: exit
    xor edi, edi       ; status: 0
    syscall

; Función AddRoundKey
addroundkey:
    ; XOR entre estado y clave de ronda
    mov ecx, 0
xor_loop:
    mov al, [state + ecx]
    mov bl, [roundkeys + ecx]
    xor al, bl
    mov [state + ecx], al
    inc ecx
    cmp ecx, 16
    jnz xor_loop
    ret

; Función SubBytes
subbytes:
    ; Reemplazo utilizando la S-box
    mov ecx, 0
subbytes_loop:
    mov al, [state + ecx]
    mov bl, [s_box + eax]
    mov [state + ecx], bl
    inc ecx
    cmp ecx, 16
    jnz subbytes_loop
    ret

; Función ShiftRows
shiftrows:
    ; Desplazamiento de filas
    ; Implementar ShiftRows
    ret

; Función MixColumns
mixcolumns:
    ; Implementar MixColumns
    ret

; Función Key Expansion
key_expansion:
    ; Implementar Key Expansion
    ret
